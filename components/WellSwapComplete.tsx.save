'use client';
import { OCRCDNService } from '../lib/ocr-cdn';
import React, { useState, useEffect, useRef } from 'react';
import { 
  Upload, Camera, Search, Filter, Star, MapPin, Calendar, 
  DollarSign, Users, Bell, Settings, Menu, X, Check, 
  AlertCircle, TrendingUp, Shield, Zap, Globe, Award,
  ArrowRight, Play, Heart, Share2, Eye, Download,
  ChevronRight, Lock, BarChart3, Target, Wallet,
  FileText, CreditCard, Timer, CheckCircle2, ExternalLink,
  User, LogOut, Plus, Edit, Trash2, Building2, Phone,
  Mail, Languages, ChevronDown
} from 'lucide-react';

// Import services
import { supabase, HONG_KONG_INSURERS, INSURANCE_PRODUCT_TYPES, checkUserRole } from '../lib/supabase';
import { AuthService } from '../lib/auth';
import { ProductService } from '../lib/products';
import { StorageService } from '../lib/storage';
import { OCRAIService } from '../lib/ai-ocr';

const WellSwapComplete = () => {
  // State management
  const [currentView, setCurrentView] = useState('home');
  const [language, setLanguage] = useState('en');
  const [user, setUser] = useState(null);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [authMode, setAuthMode] = useState('signin');
  const [uploadMethod, setUploadMethod] = useState('camera');
  const [selectedFile, setSelectedFile] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [ocrResult, setOcrResult] = useState(null);
  const [aiAnalysis, setAiAnalysis] = useState(null);
  const [walletAddress, setWalletAddress] = useState('');
  const [networkStatus, setNetworkStatus] = useState('disconnected');
  const [bnbPrice, setBnbPrice] = useState(0);
  const [userProducts, setUserProducts] = useState([]);
  const [marketplaceProducts, setMarketplaceProducts] = useState([]);
  
  // Auth state
  const [loading, setLoading] = useState(true);
  
  // Form states
  const [selectedCompany, setSelectedCompany] = useState('');
  const [customCompany, setCustomCompany] = useState('');
  const [insuranceForm, setInsuranceForm] = useState({
    company_name: '',
    product_name: '',
    product_type: 'Life Insurance',
    policy_number: '',
    original_value: '',
    purchase_date: '',
    maturity_date: '',
    premium_amount: '',
    currency: 'USD',
    location: 'Hong Kong'
  });

  // Translations
  const translations = {
    en: {
      title: "TRADE YOUR INSURANCE",
      subtitle: "World's first AI-powered insurance trading platform",
      uploadDocument: "Upload Document",
      takePhoto: "Take Photo", 
      manualEntry: "Manual Entry",
      selectCompany: "Select Insurance Company",
      customCompany: "Other Company (Enter manually)",
      productName: "Product Name",
      productType: "Product Type",
      policyNumber: "Policy Number",
      originalValue: "Original Value",
      purchaseDate: "Purchase Date",
      maturityDate: "Maturity Date",
      premiumAmount: "Premium Amount",
      currency: "Currency",
      location: "Location",
      startAnalysis: "Start AI Analysis",
      analyzing: "Analyzing...",
      marketplace: "Marketplace",
      dashboard: "Dashboard",
      signIn: "Sign In",
      signUp: "Sign Up",
      connectWallet: "Connect Wallet",
      home: "Home"
    },
    ko: {
      title: "보험을 거래하세요",
      subtitle: "AI 기반 세계 최초 보험 거래 플랫폼",
      uploadDocument: "문서 업로드",
      takePhoto: "사진 촬영",
      manualEntry: "직접 입력",
      selectCompany: "보험사 선택",
      customCompany: "기타 보험사 (직접 입력)",
      productName: "상품명",
      productType: "상품 유형",
      policyNumber: "증권번호",
      originalValue: "원래 가치",
      purchaseDate: "가입일",
      maturityDate: "만기일",
      premiumAmount: "보험료",
      currency: "통화",
      location: "지역",
      startAnalysis: "AI 분석 시작",
      analyzing: "분석 중...",
      marketplace: "마켓플레이스",
      dashboard: "대시보드",
      signIn: "로그인",
      signUp: "회원가입",
      connectWallet: "지갑 연결",
      home: "홈"
    },
    zh: {
      title: "交易您的保险",
      subtitle: "全球首个AI驱动的保险交易平台",
      uploadDocument: "上传文件",
      takePhoto: "拍照",
      manualEntry: "手动输入",
      selectCompany: "选择保险公司",
      customCompany: "其他保险公司（手动输入）",
      productName: "产品名称",
      productType: "产品类型",
      policyNumber: "保单号码",
      originalValue: "原始价值",
      purchaseDate: "购买日期",
      maturityDate: "到期日期",
      premiumAmount: "保险费",
      currency: "货币",
      location: "地区",
      startAnalysis: "开始AI分析",
      analyzing: "分析中...",
      marketplace: "市场",
      dashboard: "仪表板",
      signIn: "登录",
      signUp: "注册",
      connectWallet: "连接钱包",
      home: "首页"
    }
  };

  const t = translations[language];

  // Top 30 Hong Kong Insurance Companies (from supabase.ts)
  const hongKongInsurers = HONG_KONG_INSURERS;

  // Product types (from supabase.ts)
  const productTypes = INSURANCE_PRODUCT_TYPES;

  // Authentication and data loading
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // Initialize auth
        const currentUser = await AuthService.getCurrentUser();
        setUser(currentUser);
        
        if (currentUser?.profile?.wallet_address) {
          setWalletAddress(currentUser.profile.wallet_address);
          setNetworkStatus('connected');
        }
        
        if (currentUser?.profile?.language) {
          setLanguage(currentUser.profile.language);
        }

        // Load marketplace products
        const products = await ProductService.getMarketplaceProducts();
        setMarketplaceProducts(products);

        // Load user products if authenticated
        if (currentUser) {
          const userProducts = await ProductService.getUserProducts();
          setUserProducts(userProducts);
        }

      } catch (error) {
        console.error('App initialization error:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeApp();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (event === 'SIGNED_IN' && session?.user) {
        const currentUser = await AuthService.getCurrentUser();
        setUser(currentUser);
        setIsAuthModalOpen(false);
        
        // Reload user products
        if (currentUser) {
          const userProducts = await ProductService.getUserProducts();
          setUserProducts(userProducts);
        }
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
        setWalletAddress('');
        setNetworkStatus('disconnected');
        setUserProducts([]);
      }
    });

    return () => subscription.unsubscribe();
  }, []);
    const fetchBNBPrice = async () => {
      try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');
        const data = await response.json();
        setBnbPrice(data.binancecoin.usd);
      } catch (error) {
        console.error('Error fetching BNB price:', error);
      }
    };

  // Real-time BNB price
  useEffect(() => {
    const fetchBNBPrice = async () => {
      try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');
        const data = await response.json();
        setBnbPrice(data.binancecoin.usd);
      } catch (error) {
        console.error('Error fetching BNB price:', error);
      }
    };

    fetchBNBPrice();
    const interval = setInterval(fetchBNBPrice, 30000);
    return () => clearInterval(interval);
  }, []);

  // Handle file upload with OCR and AI analysis
  const handleFileUpload = async (file) => {
    if (!OCRAIService.isFileSupported(file)) {
      alert('Unsupported file format. Please use JPEG, PNG, WebP, or PDF files.');
      return;
    }

    setSelectedFile(file);
    setIsProcessing(true);
    setOcrResult(null);
    setAiAnalysis(null);
    
    try {
      console.log('Starting OCR and AI processing for file:', file.name);
      
      // Process document with OCR and AI analysis
      const result = await OCRAIService.processInsuranceDocument(file, {
        language: language,
        performAIAnalysis: true
      });
      
      console.log('OCR and AI processing completed:', result);
      
      setOcrResult(result.ocr);
      setAiAnalysis(result.analysis);
      
      // Auto-fill form from OCR results
      if (result.ocr.extractedData) {
        const extracted = result.ocr.extractedData;
        setInsuranceForm(prev => ({
          ...prev,
          company_name: extracted.company || '',
          product_name: extracted.productName || '',
          policy_number: extracted.policyNumber || '',
          original_value: extracted.originalValue?.toString() || '',
          purchase_date: extracted.purchaseDate || '',
          maturity_date: extracted.maturityDate || '',
          premium_amount: extracted.premiumAmount?.toString() || '',
          currency: extracted.currency || 'USD',
          location: extracted.location || 'Hong Kong'
        }));

        // Set company selection
        if (extracted.company && hongKongInsurers.includes(extracted.company)) {
          setSelectedCompany(extracted.company);
        } else if (extracted.company) {
          setSelectedCompany('custom');
          setCustomCompany(extracted.company);
        }
      }
      
    } catch (error) {
      console.error('OCR/AI processing error:', error);
      alert('Document processing failed. Please try again or use manual entry.');
    } finally {
      setIsProcessing(false);
    }
  };

  // Camera capture
  const handleCameraCapture = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.capture = 'environment';
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) handleFileUpload(file);
    };
    input.click();
  };

  // File upload
  const handleFileInput = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*,.pdf';
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) handleFileUpload(file);
    };
    input.click();
  };

  // Handle form submission with real database
  const handleFormSubmit = async (e) => {
    e.preventDefault();
    
    if (!user) {
      setIsAuthModalOpen(true);
      return;
    }

    setIsProcessing(true);
    
    try {
      // Create product data
      const productData = {
        company_name: selectedCompany === 'custom' ? customCompany : selectedCompany,
        product_name: insuranceForm.product_name,
        product_type: insuranceForm.product_type,
        policy_number: insuranceForm.policy_number,
        original_value: parseFloat(insuranceForm.original_value),
        currency: insuranceForm.currency,
        purchase_date: insuranceForm.purchase_date || null,
        maturity_date: insuranceForm.maturity_date || null,
        location: insuranceForm.location,
        risk_level: aiAnalysis?.riskLevel || null
      };

      // Create product in database
      const newProduct = await ProductService.createProduct(productData);
      
      // Save AI analysis if available
      if (aiAnalysis && newProduct.id) {
        await ProductService.saveAIAnalysis(newProduct.id, {
          surrenderValue: aiAnalysis.surrenderValue,
          marketPremium: aiAnalysis.marketPremium,
          timeValue: aiAnalysis.timeValue,
          companyAdjustment: aiAnalysis.companyAdjustment,
          riskAssessment: aiAnalysis.riskLevel,
          confidenceScore: aiAnalysis.confidenceScore,
          finalValuation: aiAnalysis.finalValuation,
          recommendedPrice: aiAnalysis.recommendedPrice,
          analysisData: aiAnalysis.analysisData,
          hongKongIAData: aiAnalysis.hongKongIAData
        });
      }

      // Upload file if selected
      if (selectedFile && newProduct.id) {
        await StorageService.uploadFile(selectedFile, newProduct.id);
      }

      // Reload user products
      const updatedProducts = await ProductService.getUserProducts();
      setUserProducts(updatedProducts);
      
      // Reset form
      setInsuranceForm({
        company_name: '',
        product_name: '',
        product_type: 'Life Insurance',
        policy_number: '',
        original_value: '',
        purchase_date: '',
        maturity_date: '',
        premium_amount: '',
        currency: 'USD',
        location: 'Hong Kong'
      });
      setSelectedCompany('');
      setCustomCompany('');
      setSelectedFile(null);
      setOcrResult(null);
      setAiAnalysis(null);
      
      alert('Insurance product submitted successfully!');
      setCurrentView('dashboard');
      
    } catch (error) {
      console.error('Submission error:', error);
      alert('Submission failed: ' + error.message);
    } finally {
      setIsProcessing(false);
    }
  };

  // Authentication handlers
  const handleSignUp = async (formData) => {
    try {
      setLoading(true);
      await AuthService.signUp(formData);
      alert('Please check your email to verify your account');
    } catch (error) {
      alert(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = async (email, password) => {
    try {
      setLoading(true);
      await AuthService.signIn({ email, password });
    } catch (error) {
      alert(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSignOut = async () => {
    try {
      await AuthService.signOut();
    } catch (error) {
      console.error('Sign out error:', error);
    }
  };

  // Navigation Component
  const Navigation = () => (
    <nav className="bg-white border-b border-gray-200 px-6 py-4">
      <div className="max-w-7xl mx-auto flex justify-between items-center">
        <div className="text-2xl font-black">WellSwap</div>
        
        <div className="hidden lg:flex space-x-8">
          <button 
            onClick={() => setCurrentView('home')}
            className={`${currentView === 'home' ? 'text-black' : 'text-gray-600'} hover:text-black transition-colors`}
          >
            {t.home}
          </button>
          <button 
            onClick={() => setCurrentView('upload')}
            className={`${currentView === 'upload' ? 'text-black' : 'text-gray-600'} hover:text-black transition-colors`}
          >
            {t.uploadDocument}
          </button>
          <button 
            onClick={() => setCurrentView('marketplace')}
            className={`${currentView === 'marketplace' ? 'text-black' : 'text-gray-600'} hover:text-black transition-colors`}
          >
            {t.marketplace}
          </button>
          {user && (
            <button 
              onClick={() => setCurrentView('dashboard')}
              className={`${currentView === 'dashboard' ? 'text-black' : 'text-gray-600'} hover:text-black transition-colors`}
            >
              {t.dashboard}
            </button>
          )}
        </div>

        <div className="flex items-center space-x-4">
          {/* Language Selector */}
          <select 
            value={language} 
            onChange={(e) => setLanguage(e.target.value)}
            className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-black"
          >
            <option value="en">English</option>
            <option value="ko">한국어</option>
            <option value="zh">中文</option>
          </select>

          {user ? (
            <div className="flex items-center space-x-3">
              <span className="text-sm font-semibold">{user.full_name}</span>
              <button 
                onClick={() => setUser(null)}
                className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <LogOut className="w-4 h-4" />
              </button>
            </div>
          ) : (
            <button 
              onClick={() => setIsAuthModalOpen(true)}
              className="px-6 py-3 bg-black text-white rounded-lg font-semibold hover:bg-gray-800 transition-colors"
            >
              {t.signIn}
            </button>
          )}
        </div>
      </div>
    </nav>
  );

  // Upload Methods Component
  const UploadMethods = () => (
    <div className="max-w-4xl mx-auto px-6 py-12">
      <h1 className="text-4xl lg:text-6xl font-black text-center mb-8">
        {t.title}
      </h1>
      <p className="text-xl text-gray-600 text-center mb-12 max-w-2xl mx-auto">
        {t.subtitle}
      </p>

      {/* Upload Method Selection */}
      <div className="grid lg:grid-cols-3 gap-8 mb-12">
        <button
          onClick={() => setUploadMethod('camera')}
          className={`p-8 rounded-2xl border-2 transition-all ${
            uploadMethod === 'camera' 
              ? 'border-black bg-black text-white' 
              : 'border-gray-200 hover:border-gray-300'
          }`}
        >
          <Camera className="w-12 h-12 mx-auto mb-4" />
          <h3 className="text-xl font-bold mb-2">{t.takePhoto}</h3>
          <p className="text-sm opacity-75">Quick capture with camera</p>
        </button>

        <button
          onClick={() => setUploadMethod('file')}
          className={`p-8 rounded-2xl border-2 transition-all ${
            uploadMethod === 'file' 
              ? 'border-black bg-black text-white' 
              : 'border-gray-200 hover:border-gray-300'
          }`}
        >
          <Upload className="w-12 h-12 mx-auto mb-4" />
          <h3 className="text-xl font-bold mb-2">{t.uploadDocument}</h3>
          <p className="text-sm opacity-75">Upload image or PDF</p>
        </button>

        <button
          onClick={() => setUploadMethod('manual')}
          className={`p-8 rounded-2xl border-2 transition-all ${
            uploadMethod === 'manual' 
              ? 'border-black bg-black text-white' 
              : 'border-gray-200 hover:border-gray-300'
          }`}
        >
          <Edit className="w-12 h-12 mx-auto mb-4" />
          <h3 className="text-xl font-bold mb-2">{t.manualEntry}</h3>
          <p className="text-sm opacity-75">Type information manually</p>
        </button>
      </div>

      {/* Upload Interface */}
      {uploadMethod === 'camera' && (
        <div className="bg-white rounded-2xl border border-gray-200 p-8 text-center">
          <Camera className="w-20 h-20 text-gray-400 mx-auto mb-6" />
          <button
            onClick={handleCameraCapture}
            className="px-8 py-4 bg-black text-white rounded-xl font-semibold hover:bg-gray-800 transition-colors"
          >
            {t.takePhoto}
          </button>
          <p className="text-sm text-gray-500 mt-4">Position your insurance document clearly</p>
        </div>
      )}

      {uploadMethod === 'file' && (
        <div className="bg-white rounded-2xl border border-gray-200 p-8 text-center">
          <Upload className="w-20 h-20 text-gray-400 mx-auto mb-6" />
          <button
            onClick={handleFileInput}
            className="px-8 py-4 bg-black text-white rounded-xl font-semibold hover:bg-gray-800 transition-colors"
          >
            {t.uploadDocument}
          </button>
          <p className="text-sm text-gray-500 mt-4">JPEG, PNG, PDF files (max 10MB)</p>
        </div>
      )}

      {uploadMethod === 'manual' && <InsuranceForm />}

      {/* Processing State */}
      {isProcessing && (
        <div className="bg-white rounded-2xl border border-gray-200 p-8 text-center mt-8">
          <div className="animate-spin w-16 h-16 border-4 border-black border-t-transparent rounded-full mx-auto mb-6"></div>
          <h3 className="text-xl font-bold mb-2">{t.analyzing}</h3>
          <p className="text-gray-600">AI analysis in progress...</p>
        </div>
      )}

      {/* AI Analysis Results */}
      {ocrResult && (
        <div className="bg-white rounded-2xl border border-gray-200 p-8 mt-8">
          <h3 className="text-2xl font-bold mb-6">OCR Processing Results</h3>
          <div className="grid lg:grid-cols-2 gap-6 mb-6">
            <div>
              <h4 className="font-semibold mb-3">Extracted Text</h4>
              <div className="bg-gray-50 p-4 rounded-lg text-sm max-h-32 overflow-y-auto">
                {ocrResult.text.substring(0, 500)}...
              </div>
              <div className="mt-2 text-sm text-gray-500">
                Confidence: {(ocrResult.confidence * 100).toFixed(1)}% | 
                Processing Time: {ocrResult.processingTime}ms
              </div>
            </div>
            <div>
              <h4 className="font-semibold mb-3">Extracted Data</h4>
              <div className="space-y-2 text-sm">
                {ocrResult.extractedData?.company && (
                  <p><strong>Company:</strong> {ocrResult.extractedData.company}</p>
                )}
                {ocrResult.extractedData?.productName && (
                  <p><strong>Product:</strong> {ocrResult.extractedData.productName}</p>
                )}
                {ocrResult.extractedData?.policyNumber && (
                  <p><strong>Policy Number:</strong> {ocrResult.extractedData.policyNumber}</p>
                )}
                {ocrResult.extractedData?.originalValue && (
                  <p><strong>Original Value:</strong> ${ocrResult.extractedData.originalValue.toLocaleString()}</p>
                )}
                {ocrResult.extractedData?.currency && (
                  <p><strong>Currency:</strong> {ocrResult.extractedData.currency}</p>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {aiAnalysis && (
        <div className="bg-white rounded-2xl border border-gray-200 p-8 mt-8">
          <h3 className="text-2xl font-bold mb-6">AI Analysis Results</h3>
          <div className="grid lg:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold mb-3">Valuation Breakdown</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Surrender Value:</span>
                  <span className="font-mono">${aiAnalysis.surrenderValue?.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span>Market Premium:</span>
                  <span className="font-mono">{aiAnalysis.marketPremium?.toFixed(1)}%</span>
                </div>
                <div className="flex justify-between">
                  <span>Time Value:</span>
                  <span className="font-mono">${aiAnalysis.timeValue?.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span>Company Adjustment:</span>
                  <span className="font-mono">{(aiAnalysis.companyAdjustment * 100)?.toFixed(1)}%</span>
                </div>
                <div className="flex justify-between">
                  <span>Risk Level:</span>
                  <span className={`font-semibold ${
                    aiAnalysis.riskLevel === 'Low' ? 'text-green-600' :
                    aiAnalysis.riskLevel === 'High' ? 'text-red-600' : 'text-yellow-600'
                  }`}>
                    {aiAnalysis.riskLevel}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Confidence Score:</span>
                  <span className="font-mono text-blue-600">{(aiAnalysis.confidenceScore * 100)?.toFixed(1)}%</span>
                </div>
              </div>
            </div>
            <div>
              <h4 className="font-semibold mb-3">Final Valuation</h4>
              <div className="text-center mb-6">
                <div className="text-4xl font-black mb-2">
                  ${aiAnalysis.finalValuation?.toLocaleString()}
                </div>
                <p className="text-gray-600">AI Fair Market Value</p>
              </div>
              <div className="text-center mb-6">
                <div className="text-2xl font-bold text-green-600 mb-2">
                  ${aiAnalysis.recommendedPrice?.toLocaleString()}
                </div>
                <p className="text-gray-600">Recommended Listing Price</p>
              </div>
              {aiAnalysis.hongKongIAData && (
                <div className="text-xs text-gray-500">
                  <p>Enhanced with Hong Kong IA data</p>
                </div>
              )}
            </div>
          </div>
          <button 
            onClick={() => {
              if (aiAnalysis.confidenceScore >= 0.85) {
                handleFormSubmit(new Event('submit'));
              } else {
                alert('AI confidence score too low. Please review and submit manually.');
              }
            }}
            className="w-full mt-6 py-4 bg-black text-white rounded-xl font-semibold hover:bg-gray-800 transition-colors"
            disabled={aiAnalysis.confidenceScore < 0.7}
          >
            {aiAnalysis.confidenceScore >= 0.85 ? 'Auto-List on Marketplace' : 'Review and Submit Manually'}
          </button>
        </div>
      )}
    </div>
  );

  // Insurance Form Component
  const InsuranceForm = () => (
    <div className="bg-white rounded-2xl border border-gray-200 p-8">
      <h3 className="text-2xl font-bold mb-6">Insurance Information</h3>
      
      <form onSubmit={handleFormSubmit} className="space-y-6">
        {/* Company Selection */}
        <div>
          <label className="block text-sm font-semibold mb-3">{t.selectCompany}</label>
          <select
            value={selectedCompany}
            onChange={(e) => setSelectedCompany(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            required
          >
            <option value="">{t.selectCompany}</option>
            {hongKongInsurers.map((company) => (
              <option key={company} value={company}>{company}</option>
            ))}
            <option value="custom">{t.customCompany}</option>
          </select>
        </div>

        {/* Custom Company Input */}
        {selectedCompany === 'custom' && (
          <div>
            <label className="block text-sm font-semibold mb-3">Company Name</label>
            <input
              type="text"
              value={customCompany}
              onChange={(e) => setCustomCompany(e.target.value)}
              placeholder="Enter insurance company name"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
              required
            />
          </div>
        )}

        {/* Product Information */}
        <div className="grid lg:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-semibold mb-3">{t.productName}</label>
            <input
              type="text"
              value={insuranceForm.product_name}
              onChange={(e) => setInsuranceForm({...insuranceForm, product_name: e.target.value})}
              placeholder="e.g., Premier Treasure"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-semibold mb-3">{t.productType}</label>
            <select
              value={insuranceForm.product_type}
              onChange={(e) => setInsuranceForm({...insuranceForm, product_type: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            >
              {productTypes.map((type) => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-semibold mb-3">{t.policyNumber}</label>
            <input
              type="text"
              value={insuranceForm.policy_number}
              onChange={(e) => setInsuranceForm({...insuranceForm, policy_number: e.target.value})}
              placeholder="POL-123456789"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold mb-3">{t.originalValue}</label>
            <input
              type="number"
              value={insuranceForm.original_value}
              onChange={(e) => setInsuranceForm({...insuranceForm, original_value: e.target.value})}
              placeholder="125000"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
              required
              min="1000"
            />
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-semibold mb-3">{t.purchaseDate}</label>
            <input
              type="date"
              value={insuranceForm.purchase_date}
              onChange={(e) => setInsuranceForm({...insuranceForm, purchase_date: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold mb-3">{t.maturityDate}</label>
            <input
              type="date"
              value={insuranceForm.maturity_date}
              onChange={(e) => setInsuranceForm({...insuranceForm, maturity_date: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            />
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          <div>
            <label className="block text-sm font-semibold mb-3">{t.premiumAmount}</label>
            <input
              type="number"
              value={insuranceForm.premium_amount}
              onChange={(e) => setInsuranceForm({...insuranceForm, premium_amount: e.target.value})}
              placeholder="5000"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold mb-3">{t.currency}</label>
            <select
              value={insuranceForm.currency}
              onChange={(e) => setInsuranceForm({...insuranceForm, currency: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            >
              <option value="USD">USD</option>
              <option value="HKD">HKD</option>
              <option value="SGD">SGD</option>
              <option value="CNY">CNY</option>
              <option value="KRW">KRW</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-semibold mb-3">{t.location}</label>
            <select
              value={insuranceForm.location}
              onChange={(e) => setInsuranceForm({...insuranceForm, location: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
            >
              <option value="Hong Kong">Hong Kong</option>
              <option value="Singapore">Singapore</option>
              <option value="Korea">Korea</option>
              <option value="Malaysia">Malaysia</option>
              <option value="Other">Other</option>
            </select>
          </div>
        </div>

        <button
          type="submit"
          disabled={isProcessing}
          className="w-full py-4 bg-black text-white rounded-xl font-semibold hover:bg-gray-800 transition-colors disabled:opacity-50"
        >
          {isProcessing ? t.analyzing : t.startAnalysis}
        </button>
      </form>
    </div>
  );

  // Main Component Render
  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      
      {/* Network Status */}
      {bnbPrice > 0 && (
        <div className="bg-black text-white px-6 py-2 text-center text-sm">
          <span className="font-mono">BNB: ${bnbPrice.toFixed(2)}</span>
          <span className="ml-6 font-mono">Registration Fee: ~{(300 / bnbPrice).toFixed(4)} BNB</span>
        </div>
      )}

      {/* Main Content */}
      {currentView === 'home' && (
        <div className="max-w-7xl mx-auto px-6 py-20 text-center">
          <h1 className="text-6xl lg:text-8xl font-black mb-8">
            WELLSWAP
          </h1>
          <p className="text-2xl text-gray-600 mb-12 max-w-3xl mx-auto">
            {t.subtitle}
          </p>
          <div className="flex flex-col lg:flex-row gap-6 justify-center">
            <button
              onClick={() => setCurrentView('upload')}
              className="px-12 py-6 bg-black text-white rounded-xl text-xl font-semibold hover:bg-gray-800 transition-colors"
            >
              {t.startAnalysis}
            </button>
            <button
              onClick={() => setCurrentView('marketplace')}
              className="px-12 py-6 border-2 border-black rounded-xl text-xl font-semibold hover:bg-gray-50 transition-colors"
            >
              {t.marketplace}
            </button>
          </div>
        </div>
      )}

      {currentView === 'upload' && <UploadMethods />}

      {currentView === 'marketplace' && (
        <div className="max-w-7xl mx-auto px-6 py-12">
          <h1 className="text-4xl font-black mb-8">Insurance Marketplace</h1>
          <div className="text-center py-20">
            <Building2 className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-600">Marketplace coming soon...</p>
          </div>
        </div>
      )}

      {currentView === 'dashboard' && user && (
        <div className="max-w-7xl mx-auto px-6 py-12">
          <h1 className="text-4xl font-black mb-8">My Dashboard</h1>
          <div className="text-center py-20">
            <User className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-600">Dashboard coming soon...</p>
          </div>
        </div>
      )}

      {/* Auth Modal */}
      {isAuthModalOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl max-w-md w-full p-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold">
                {authMode === 'signin' ? t.signIn : t.signUp}
              </h2>
              <button 
                onClick={() => setIsAuthModalOpen(false)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <form className="space-y-4">
              <input
                type="email"
                placeholder="Email"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                required
              />
              <input
                type="password"
                placeholder="Password"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                required
              />
              <button
                type="submit"
                className="w-full py-3 bg-black text-white rounded-lg font-semibold hover:bg-gray-800 transition-colors"
              >
                {authMode === 'signin' ? t.signIn : t.signUp}
              </button>
            </form>

            <div className="mt-6 text-center">
              <button
                onClick={() => setAuthMode(authMode === 'signin' ? 'signup' : 'signin')}
                className="text-gray-600 hover:text-black transition-colors"
              >
                {authMode === 'signin' 
                  ? "Don't have an account? Sign up" 
                  : "Already have an account? Sign in"
                }
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WellSwapComplete;
