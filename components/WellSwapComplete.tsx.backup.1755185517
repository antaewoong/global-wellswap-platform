'use client';

import React, { useState, useEffect, useRef } from 'react';
import { 
  Upload, Camera, Search, Filter, Star, MapPin, Calendar, 
  DollarSign, Users, Bell, Settings, Menu, X, Check, 
  AlertCircle, TrendingUp, Shield, Zap, Globe, Award,
  ArrowRight, ArrowLeft, Eye, MessageCircle, ChevronDown,
  ChevronUp, Wallet, Database, Cpu, CheckCircle, XCircle,
  Info, Loader, ScanLine, FileText, Image as ImageIcon,
  CreditCard, BarChart3, PieChart, Activity, TrendingDown
} from 'lucide-react';

// Types
interface InsuranceForm {
  company_name: string;
  product_name: string;
  policy_number: string;
  original_value: string;
  purchase_date: string;
  maturity_date: string;
  premium_amount: string;
  currency: string;
  location: string;
  asking_price: string;
  description: string;
  contact_method: string;
}

interface NotificationState {
  id: string;
  message: string;
  type: 'success' | 'error' | 'warning' | 'info';
  timestamp: Date;
}

interface User {
  id: string;
  email: string;
  wallet_address?: string;
  full_name?: string;
  is_admin?: boolean;
}

interface MarketplaceProduct {
  id: string;
  company_name: string;
  product_name: string;
  original_value: number;
  asking_price: number;
  currency: string;
  apy: number;
  risk_level: 'Low' | 'Medium' | 'High';
  maturity_date: string;
  seller_rating: number;
  status: 'active' | 'pending' | 'sold';
}

// Hong Kong Top 30 Insurance Companies
const hongKongInsurers = [
  "AIA Hong Kong",
  "Prudential Hong Kong", 
  "Manulife Hong Kong",
  "FWD Insurance",
  "Great Eastern",
  "Zurich International Life",
  "HSBC Life",
  "Standard Life",
  "Sun Life Hong Kong",
  "Hang Seng Bank",
  "Bank of China Life",
  "China Life",
  "Ping An Insurance",
  "BOCG Life",
  "MetLife Hong Kong",
  "AXA Hong Kong",
  "Generali Hong Kong",
  "Allied World",
  "QBE Hong Kong",
  "Chubb Hong Kong",
  "Liberty Insurance",
  "Starr International",
  "Tokio Marine",
  "RSA Insurance",
  "MSIG Insurance",
  "Blue Cross",
  "Bupa Hong Kong",
  "Cigna Hong Kong",
  "Allianz Hong Kong",
  "Swiss Re"
];

// Language translations
const translations = {
  en: {
    title: "WellSwap",
    subtitle: "Insurance Exchange Platform",
    hero: {
      title: "TRADE YOUR",
      subtitle: "INSURANCE POLICIES",
      description: "Transform your insurance policies into liquid assets with AI-powered valuation and blockchain security.",
      cta: "Get Free AI Valuation",
      upload: "Upload Document"
    },
    features: {
      ai: {
        title: "AI Valuation",
        description: "95% accuracy with real-time market data analysis"
      },
      blockchain: {
        title: "Blockchain Security", 
        description: "Smart contracts ensure safe and transparent trading"
      },
      global: {
        title: "Global Market",
        description: "Access worldwide insurance trading opportunities"
      }
    },
    navigation: {
      marketplace: "Marketplace",
      upload: "Upload Document", 
      dashboard: "Dashboard",
      language: "Language"
    },
    upload: {
      title: "Upload Insurance Certificate",
      camera: "Take Photo",
      file: "Upload Document",
      manual: "Manual Input",
      processing: "Analyzing document with AI...",
      confidence: "OCR Confidence",
      extracted: "Extracted Data"
    },
    form: {
      company: "Insurance Company",
      product: "Product Name",
      policy: "Policy Number",
      value: "Original Value",
      asking: "Asking Price",
      purchase: "Purchase Date",
      maturity: "Maturity Date",
      premium: "Premium Amount",
      currency: "Currency",
      location: "Location",
      description: "Description",
      submit: "List Policy",
      select_company: "Select Company",
      other: "Other (Custom)",
      custom_company: "Enter company name"
    },
    wallet: {
      connect: "Connect Wallet",
      connected: "Connected",
      disconnect: "Disconnect"
    },
    marketplace: {
      title: "Insurance Marketplace",
      filter: "Filter by",
      search: "Search policies...",
      sort: "Sort by",
      price: "Price",
      rating: "Rating",
      apy: "APY",
      risk: "Risk Level",
      buy: "Buy Now",
      details: "View Details"
    }
  },
  ko: {
    title: "웰스왑",
    subtitle: "보험 거래 플랫폼",
    hero: {
      title: "보험을",
      subtitle: "거래하세요",
      description: "AI 기반 평가와 블록체인 보안으로 보험 증권을 유동 자산으로 전환하세요.",
      cta: "무료 AI 평가받기",
      upload: "문서 업로드"
    },
    features: {
      ai: {
        title: "AI 평가",
        description: "실시간 시장 데이터 분석으로 95% 정확도"
      },
      blockchain: {
        title: "블록체인 보안",
        description: "스마트 계약으로 안전하고 투명한 거래 보장"
      },
      global: {
        title: "글로벌 마켓",
        description: "전 세계 보험 거래 기회에 접근"
      }
    },
    navigation: {
      marketplace: "마켓플레이스",
      upload: "문서 업로드",
      dashboard: "대시보드", 
      language: "언어"
    },
    upload: {
      title: "보험증서 업로드",
      camera: "사진 촬영",
      file: "문서 업로드",
      manual: "수동 입력",
      processing: "AI로 문서 분석 중...",
      confidence: "OCR 신뢰도",
      extracted: "추출된 데이터"
    },
    form: {
      company: "보험회사",
      product: "상품명",
      policy: "증권번호",
      value: "원래 가치",
      asking: "희망 가격",
      purchase: "구매일",
      maturity: "만기일",
      premium: "보험료",
      currency: "통화",
      location: "지역",
      description: "설명",
      submit: "정책 등록",
      select_company: "회사 선택",
      other: "기타 (직접입력)",
      custom_company: "회사명 입력"
    },
    wallet: {
      connect: "지갑 연결",
      connected: "연결됨",
      disconnect: "연결 해제"
    },
    marketplace: {
      title: "보험 마켓플레이스",
      filter: "필터",
      search: "정책 검색...",
      sort: "정렬",
      price: "가격",
      rating: "평점",
      apy: "수익률",
      risk: "위험도",
      buy: "구매하기",
      details: "상세보기"
    }
  },
  zh: {
    title: "财富交换",
    subtitle: "保险交易平台",
    hero: {
      title: "交易您的",
      subtitle: "保险政策",
      description: "通过AI驱动的估值和区块链安全性，将您的保险政策转化为流动资产。",
      cta: "获取免费AI评估",
      upload: "上传文档"
    },
    features: {
      ai: {
        title: "AI估值",
        description: "实时市场数据分析，准确率95%"
      },
      blockchain: {
        title: "区块链安全",
        description: "智能合约确保安全透明的交易"
      },
      global: {
        title: "全球市场",
        description: "获得全球保险交易机会"
      }
    },
    navigation: {
      marketplace: "市场",
      upload: "上传文档",
      dashboard: "仪表板",
      language: "语言"
    },
    upload: {
      title: "上传保险证书",
      camera: "拍照",
      file: "上传文档",
      manual: "手动输入",
      processing: "AI分析文档中...",
      confidence: "OCR置信度",
      extracted: "提取的数据"
    },
    form: {
      company: "保险公司",
      product: "产品名称",
      policy: "保单号码",
      value: "原始价值",
      asking: "要价",
      purchase: "购买日期",
      maturity: "到期日期",
      premium: "保险费",
      currency: "货币",
      location: "地点",
      description: "描述",
      submit: "列出政策",
      select_company: "选择公司",
      other: "其他（自定义）",
      custom_company: "输入公司名称"
    },
    wallet: {
      connect: "连接钱包",
      connected: "已连接",
      disconnect: "断开连接"
    },
    marketplace: {
      title: "保险市场",
      filter: "筛选",
      search: "搜索政策...",
      sort: "排序",
      price: "价格",
      rating: "评级",
      apy: "年收益率",
      risk: "风险等级",
      buy: "立即购买",
      details: "查看详情"
    }
  }
};

// Sample marketplace data
const sampleProducts: MarketplaceProduct[] = [
  {
    id: '1',
    company_name: 'AIA Hong Kong',
    product_name: 'Premier Treasure Plan',
    original_value: 100000,
    asking_price: 85000,
    currency: 'USD',
    apy: 8.5,
    risk_level: 'Low',
    maturity_date: '2030-12-31',
    seller_rating: 4.8,
    status: 'active'
  },
  {
    id: '2',
    company_name: 'Prudential Hong Kong',
    product_name: 'Wealth Builder Series',
    original_value: 150000,
    asking_price: 135000,
    currency: 'USD',
    apy: 7.2,
    risk_level: 'Medium',
    maturity_date: '2028-06-15',
    seller_rating: 4.9,
    status: 'active'
  },
  {
    id: '3',
    company_name: 'Manulife Hong Kong',
    product_name: 'Future Protector',
    original_value: 75000,
    asking_price: 68000,
    currency: 'USD',
    apy: 6.8,
    risk_level: 'Low',
    maturity_date: '2032-03-20',
    seller_rating: 4.7,
    status: 'active'
  },
  {
    id: '4',
    company_name: 'FWD Insurance',
    product_name: 'SmartLife Plan',
    original_value: 200000,
    asking_price: 185000,
    currency: 'USD',
    apy: 9.1,
    risk_level: 'High',
    maturity_date: '2029-09-10',
    seller_rating: 4.6,
    status: 'active'
  }
];

const WellSwapComplete = () => {
  // State Management
  const [currentView, setCurrentView] = useState('home');
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedCompany, setSelectedCompany] = useState('');
  const [customCompany, setCustomCompany] = useState('');
  const [notifications, setNotifications] = useState<NotificationState[]>([]);
  const [walletConnected, setWalletConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState('');
  const [isUsingCamera, setIsUsingCamera] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRisk, setFilterRisk] = useState('all');
  const [sortBy, setSortBy] = useState('apy');
  const [ocrResult, setOcrResult] = useState<any>(null);
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Get current translations
  const t = translations[currentLanguage as keyof typeof translations];

  // Insurance Form State
  const [insuranceForm, setInsuranceForm] = useState<InsuranceForm>({
    company_name: '',
    product_name: '',
    policy_number: '',
    original_value: '',
    purchase_date: '',
    maturity_date: '',
    premium_amount: '',
    currency: 'USD',
    location: 'Hong Kong',
    asking_price: '',
    description: '',
    contact_method: 'platform'
  });

  // Add Notification Function
  const addNotification = (message: string, type: NotificationState['type']) => {
    const notification: NotificationState = {
      id: Date.now().toString(),
      message,
      type,
      timestamp: new Date()
    };
    setNotifications(prev => [notification, ...prev.slice(0, 4)]);
    
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== notification.id));
    }, 5000);
  };

  // MetaMask Connection
  const connectWallet = async () => {
    try {
      if (typeof window.ethereum !== 'undefined') {
        const accounts = await window.ethereum.request({
          method: 'eth_requestAccounts'
        });
        
        if (accounts.length > 0) {
          setWalletAddress(accounts[0]);
          setWalletConnected(true);
          addNotification('Wallet connected successfully!', 'success');
          
          // Check if admin wallet
          const adminWallet = '0x02756b93394d0bD27aE81C1E5a6e1d55D0B608FE';
          const isAdmin = accounts[0].toLowerCase() === adminWallet.toLowerCase();
          
          setUser({
            id: accounts[0],
            email: `user@${accounts[0].slice(2, 8)}.wallet`,
            wallet_address: accounts[0],
            full_name: `User ${accounts[0].slice(2, 8)}`,
            is_admin: isAdmin
          });
        }
      } else {
        addNotification('Please install MetaMask to continue', 'error');
        window.open('https://metamask.io/download/', '_blank');
      }
    } catch (error) {
      console.error('Wallet connection failed:', error);
      addNotification('Failed to connect wallet', 'error');
    }
  };

  // Filter and sort marketplace products
  const filteredProducts = sampleProducts.filter(product => {
    const matchesSearch = product.company_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.product_name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRisk = filterRisk === 'all' || product.risk_level.toLowerCase() === filterRisk.toLowerCase();
    return matchesSearch && matchesRisk;
  }).sort((a, b) => {
    switch (sortBy) {
      case 'price': return a.asking_price - b.asking_price;
      case 'apy': return b.apy - a.apy;
      case 'rating': return b.seller_rating - a.seller_rating;
      default: return 0;
    }
  });

  // Monitor wallet changes
  useEffect(() => {
    if (typeof window.ethereum !== 'undefined') {
      window.ethereum.on('accountsChanged', (accounts: string[]) => {
        if (accounts.length === 0) {
          setWalletConnected(false);
          setWalletAddress('');
          setUser(null);
          addNotification('Wallet disconnected', 'info');
        } else {
          setWalletAddress(accounts[0]);
          
          const adminWallet = '0x02756b93394d0bD27aE81C1E5a6e1d55D0B608FE';
          const isAdmin = accounts[0].toLowerCase() === adminWallet.toLowerCase();
          
          setUser({
            id: accounts[0],
            email: `user@${accounts[0].slice(2, 8)}.wallet`,
            wallet_address: accounts[0],
            full_name: `User ${accounts[0].slice(2, 8)}`,
            is_admin: isAdmin
          });
        }
      });
    }
  }, []);

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-black rounded-lg flex items-center justify-center">
                <Shield className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-black">{t.title}</h1>
                <p className="text-xs text-gray-500">{t.subtitle}</p>
              </div>
            </div>

            {/* Navigation */}
            <div className="hidden md:flex items-center space-x-6">
              <button
                onClick={() => setCurrentView('home')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'home' 
                    ? 'bg-black text-white' 
                    : 'text-gray-600 hover:text-black'
                }`}
              >
                {t.navigation.marketplace}
              </button>
              <button
                onClick={() => setCurrentView('upload')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'upload' 
                    ? 'bg-black text-white' 
                    : 'text-gray-600 hover:text-black'
                }`}
              >
                {t.navigation.upload}
              </button>
              <button
                onClick={() => setCurrentView('dashboard')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'dashboard' 
                    ? 'bg-black text-white' 
                    : 'text-gray-600 hover:text-black'
                }`}
              >
                {t.navigation.dashboard}
              </button>
            </div>

            {/* Language & Wallet */}
            <div className="flex items-center space-x-4">
              {/* Language Selector */}
              <select
                value={currentLanguage}
                onChange={(e) => setCurrentLanguage(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-black focus:border-transparent"
              >
                <option value="en">English</option>
                <option value="ko">한국어</option>
                <option value="zh">中文</option>
              </select>

              {/* Wallet Connection */}
              {walletConnected ? (
                <div className="flex items-center space-x-2 bg-green-50 px-3 py-2 rounded-lg">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-sm font-medium text-green-700">
                    {walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}
                  </span>
                </div>
              ) : (
                <button
                  onClick={connectWallet}
                  className="flex items-center space-x-2 bg-black text-white px-4 py-2 rounded-lg hover:bg-gray-800 transition-colors"
                >
                  <Wallet className="w-4 h-4" />
                  <span>{t.wallet.connect}</span>
                </button>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Home View */}
        {currentView === 'home' && (
          <>
            {/* Hero Section */}
            <section className="py-20 text-center">
              <h1 className="text-6xl md:text-8xl font-bold text-black mb-6 tracking-tight">
                {t.hero.title}
                <br />
                {t.hero.subtitle}
              </h1>
              <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
                {t.hero.description}
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button
                  onClick={() => setCurrentView('upload')}
                  className="bg-black text-white px-8 py-4 rounded-lg hover:bg-gray-800 transition-colors font-semibold"
                >
                  {t.hero.cta}
                </button>
                <button
                  onClick={() => setCurrentView('upload')}
                  className="border border-black text-black px-8 py-4 rounded-lg hover:bg-black hover:text-white transition-colors font-semibold"
                >
                  {t.hero.upload}
                </button>
              </div>
            </section>

            {/* Features */}
            <section className="py-20 bg-gray-50 -mx-4 sm:-mx-6 lg:-mx-8 px-4 sm:px-6 lg:px-8">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div className="text-center">
                  <div className="w-16 h-16 bg-black rounded-lg flex items-center justify-center mx-auto mb-4">
                    <Cpu className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-bold mb-2">{t.features.ai.title}</h3>
                  <p className="text-gray-600">{t.features.ai.description}</p>
                </div>
                <div className="text-center">
                  <div className="w-16 h-16 bg-black rounded-lg flex items-center justify-center mx-auto mb-4">
                    <Shield className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-bold mb-2">{t.features.blockchain.title}</h3>
                  <p className="text-gray-600">{t.features.blockchain.description}</p>
                </div>
                <div className="text-center">
                  <div className="w-16 h-16 bg-black rounded-lg flex items-center justify-center mx-auto mb-4">
                    <Globe className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-bold mb-2">{t.features.global.title}</h3>
                  <p className="text-gray-600">{t.features.global.description}</p>
                </div>
              </div>
            </section>

            {/* Marketplace Preview */}
            <section className="py-20">
              <div className="flex justify-between items-center mb-8">
                <h2 className="text-3xl font-bold text-black">{t.marketplace.title}</h2>
                <div className="flex items-center space-x-4">
                  <input
                    type="text"
                    placeholder={t.marketplace.search}
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="border border-gray-300 rounded-lg px-4 py-2 w-64 focus:ring-2 focus:ring-black focus:border-transparent"
                  />
                  <select
                    value={filterRisk}
                    onChange={(e) => setFilterRisk(e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-black focus:border-transparent"
                  >
                    <option value="all">{t.marketplace.filter}</option>
                    <option value="low">Low Risk</option>
                    <option value="medium">Medium Risk</option>
                    <option value="high">High Risk</option>
                  </select>
                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-black focus:border-transparent"
                  >
                    <option value="apy">{t.marketplace.apy}</option>
                    <option value="price">{t.marketplace.price}</option>
                    <option value="rating">{t.marketplace.rating}</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
                {filteredProducts.map((product) => (
                  <div key={product.id} className="border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-shadow">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h3 className="font-bold text-lg">{product.company_name}</h3>
                        <p className="text-gray-600">{product.product_name}</p>
                      </div>
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                        product.risk_level === 'Low' ? 'bg-green-100 text-green-800' :
                        product.risk_level === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {product.risk_level} Risk
                      </span>
                    </div>
                    
                    <div className="space-y-2 mb-4">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Original Value:</span>
                        <span className="font-medium">${product.original_value.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Asking Price:</span>
                        <span className="font-bold text-black">${product.asking_price.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">APY:</span>
                        <span className="font-medium text-green-600">{product.apy}%</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Seller Rating:</span>
                        <div className="flex items-center">
                          <Star className="w-4 h-4 text-yellow-400 fill-current" />
                          <span className="ml-1 font-medium">{product.seller_rating}</span>
                        </div>
                      </div>
                    </div>
                    
                    <button className="w-full bg-black text-white py-2 rounded-lg hover:bg-gray-800 transition-colors">
                      {t.marketplace.details}
                    </button>
                  </div>
                ))}
              </div>
            </section>
          </>
        )}

        {/* Upload View */}
        {currentView === 'upload' && (
          <div className="py-12">
            <div className="max-w-4xl mx-auto">
              <div className="bg-white rounded-lg shadow-lg p-8">
                <div className="mb-8">
                  <h2 className="text-3xl font-bold text-black mb-2">{t.upload.title}</h2>
                  <p className="text-gray-600">Upload your insurance certificate for automatic data extraction</p>
                </div>

                <div className="text-center py-20">
                  <h3 className="text-xl font-bold text-gray-900 mb-4">Upload Document Feature</h3>
                  <p className="text-gray-600 mb-8">OCR and AI analysis features will be implemented here</p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-2xl mx-auto">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                      <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-600 mb-2">Upload Document</p>
                      <p className="text-sm text-gray-500">PNG, JPG, PDF up to 10MB</p>
                    </div>
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                      <Camera className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-600 mb-2">Take Photo</p>
                      <p className="text-sm text-gray-500">Use camera to capture</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Dashboard View */}
        {currentView === 'dashboard' && (
          <div className="py-12">
            <div className="mb-8">
              <h2 className="text-3xl font-bold text-black mb-2">{t.navigation.dashboard}</h2>
              <p className="text-gray-600">Manage your insurance policies and transactions</p>
            </div>

            {user?.is_admin ? (
              // Admin Dashboard
              <div className="space-y-8">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">Total Users</p>
                        <p className="text-3xl font-bold text-black">1,247</p>
                      </div>
                      <Users className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">Active Policies</p>
                        <p className="text-3xl font-bold text-black">89</p>
                      </div>
                      <FileText className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">Total Volume</p>
                        <p className="text-3xl font-bold text-black">$2.3M</p>
                      </div>
                      <BarChart3 className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">Success Rate</p>
                        <p className="text-3xl font-bold text-black">98.7%</p>
                      </div>
                      <TrendingUp className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              // User Dashboard
              <div className="space-y-8">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">My Policies</p>
                        <p className="text-3xl font-bold text-black">3</p>
                      </div>
                      <Shield className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">Total Value</p>
                        <p className="text-3xl font-bold text-black">$285K</p>
                      </div>
                      <DollarSign className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                  <div className="bg-white p-6 rounded-lg shadow-lg border">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">Avg. Rating</p>
                        <p className="text-3xl font-bold text-black">4.8</p>
                      </div>
                      <Star className="w-8 h-8 text-gray-400" />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </main>

      {/* Notification Panel */}
      <div className="fixed top-20 right-4 z-50 space-y-2 max-w-sm">
        {notifications.map((notification) => (
          <div
            key={notification.id}
            className={`bg-white border-l-4 rounded-lg shadow-lg p-4 transition-all duration-300 ${
              notification.type === 'success' ? 'border-green-500' :
              notification.type === 'error' ? 'border-red-500' : 
              notification.type === 'warning' ? 'border-yellow-500' : 'border-blue-500'
            }`}
          >
            <div className="flex items-start space-x-3">
              <div className={`w-5 h-5 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5 ${
                notification.type === 'success' ? 'bg-green-100' :
                notification.type === 'error' ? 'bg-red-100' : 
                notification.type === 'warning' ? 'bg-yellow-100' : 'bg-blue-100'
              }`}>
                {notification.type === 'success' && <CheckCircle className="w-3 h-3 text-green-600" />}
                {notification.type === 'error' && <XCircle className="w-3 h-3 text-red-600" />}
                {notification.type === 'warning' && <AlertCircle className="w-3 h-3 text-yellow-600" />}
                {notification.type === 'info' && <Info className="w-3 h-3 text-blue-600" />}
              </div>
              <div className="flex-1 min-w-0">
                <div className="text-black font-medium text-sm leading-5 whitespace-pre-line">
                  {notification.message}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {notification.timestamp.toLocaleTimeString()}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default WellSwapComplete;